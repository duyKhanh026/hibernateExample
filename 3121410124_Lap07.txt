
package com.mycompany.hibernateexample;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;


public class HibernateExample {
    private static SessionFactory factory;
    
    public static void main(String[] args) {
        try {
            factory = new Configuration().configure().buildSessionFactory();
            
        }catch(Throwable ex){
            System.out.println("Failed to create sessionFactory object" + ex);
            throw new ExceptionInInitializerError(ex);
        }
        HibernateExample hb2 = new HibernateExample();
        
        String startDatestr = "2008-10-01 08:00:00.0";
        Date startDate = null;
        try {
            startDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(startDatestr);
        } catch (Exception e) {
            e.printStackTrace();
        }
        Department department1 = new Department("Department 1", startDate, 10000, 1);
        Department department2 = new Department("Department 2", startDate, 15000, 2);
        
//      ví dụ về thêm department
//        hb2.addDepartment(department1);
//        hb2.addDepartment(department2);
            
        // ví dụ về sửa department
        department1 = new Department("Department 1 da sua", startDate, 15000, 1);
        department1.setDepartmentID(8);
//        hb2.updateDepartment(department1);
        
        //ví dụ về xóa department
//        hb2.deleteDepartment(9);
        
        hb2.listDepartment();
    }
    public void listDepartment() {
        Session session = factory.openSession();
        Transaction tx = null;
         try{
             tx = session.beginTransaction();
             List employess = session.createQuery("FROM Department").list();
             for (Iterator iterator = employess.iterator(); iterator.hasNext();) {
                 Department dp = (Department) iterator.next();
                 System.out.print(" Name: " + dp.getName());
                 System.out.println(" StartDate: " + dp.getStartDate());
                 System.out.println(" Budget: " + dp.getBudget());
             }
         } catch (HibernateException e){
             if (tx != null) tx.rollback();
             e.printStackTrace();
         }
    }
    public Integer addDepartment(Department dp) {
        Session session = factory.openSession();
        Transaction tx = null;
        Integer departmentID = null;
        try {
            tx = session.beginTransaction();
            Department department = new Department(dp.getName(), dp.getStartDate(), dp.getBudget(), dp.getAdministrator());
            departmentID = (Integer) session.save(department);
            tx.commit();
        } catch (HibernateException e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }
        return departmentID;
    }
    public void updateDepartment(Department dp) {
        Session session = factory.openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            Department department = (Department) session.get(Department.class, dp.getDepartmentID());
            department.setName(dp.getName());
            department.setStartDate(dp.getStartDate());
            department.setBudget(dp.getBudget());
            department.setAdministrator(dp.getAdministrator());
            session.update(department);
            tx.commit();
        } catch (HibernateException e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }
    } 
    public void deleteDepartment(Integer departmentID) {
        Session session = factory.openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            Department department = (Department) session.get(Department.class, departmentID);
            session.delete(department);
            tx.commit();
        } catch (HibernateException e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }
    }

}


<!-- file hibernate.cfg.xml -->
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
 
<hibernate-configuration>
    <session-factory>
        <!-- Database setting -->
        <!-- SQL dialect -->
        <property name="dialect">org.hibernate.dialect.MySQL5Dialect</property>
        <property name="connection.driver_class">com.mysql.jdbc.Driver</property>
        <property name="connection.url">jdbc:mysql://localhost:3306/school?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8</property>
        <property name="connection.username">root</property>
        <property name="connection.password"></property>
        <!-- JDBC connection pool (use the built-in) -->
        <property name="connection.pool_size">4</property>    
        <!-- Enable Hibernate's automatic session context management -->
        <property name="current_session_context_class">thread</property>
        <!-- Disable the second-level cache -->
        <property name="cache.provider_class">org.hibernate.cache.internal.NoCacheProvider</property> 
        <property name="hibernate.hbm2ddl.auto">validate</property> <!-- Fixed property name -->
        <!-- Show all executed SQL to console -->
        <property name="show_sql">true</property>
        <!-- Entity mapping -->
        <!-- <mapping class="demopl.DAL.Course" /> -->
        <mapping resource="Department.hbm.xml"/> <!-- Fixed resource attribute -->
    </session-factory>
</hibernate-configuration>

<!--Department.hbm.xml--> 
<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE hibernate-mapping PUBLIC 
"-//Hibernate/Hibernate Mapping DTD//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"> 

<hibernate-mapping>
   <class name = "com.mycompany.hibernateexample.Department" table = "Department">
   
<meta attribute = "class-description">
         This class contains the department detail. 
      </meta>
      

      <id name = "departmentID" type = "int" column = "DepartmentID">
         <generator class="native"/>
      </id>
      
      <property name = "name" column = "Name" type = "string"/>
      <property name="startDate" column="StartDate" type="timestamp"/>
      <property name = "budget" column = "Budget" type = "double"/>
      <property name = "administrator" column = "Administrator" type = "int"/>
      
   </class>
</hibernate-mapping>
